name: Maven Test and Slack Notification v2.0

on:
  workflow_dispatch:
    # Manually trigger the workflow

jobs:
  build:
    runs-on: ubuntu-latest  # Using Ubuntu environment for compatibility with xmlstarlet

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B test

      - name: Archive surefire test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: surefire-reports
          path: target/surefire-reports

      - name: Parse Surefire XML Reports
        id: parse_xml_reports
        run: |
          # Install xmlstarlet if not already available
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

          # Initialize variables
          total_tests=0
          passed_tests=0
          failed_tests=0
          skipped_tests=0

          # Loop through all XML files and extract counts
          for file in target/surefire-reports/junitreports/TEST-*.xml; do
            total_tests=$((total_tests + $(xmlstarlet sel -t -v "count(//testsuite/testcase)" "$file")))
            passed_tests=$((passed_tests + $(xmlstarlet sel -t -v "count(//testsuite/testcase[@status='passed'])" "$file")))
            failed_tests=$((failed_tests + $(xmlstarlet sel -t -v "count(//testsuite/testcase[@status='failed'])" "$file")))
            skipped_tests=$((skipped_tests + $(xmlstarlet sel -t -v "count(//testsuite/testcase[@status='skipped'])" "$file")))
          done

          # Set outputs for downstream steps to use
          echo "::set-output name=totalTests::$total_tests"
          echo "::set-output name=passedTests::$passed_tests"
          echo "::set-output name=failedTests::$failed_tests"
          echo "::set-output name=skippedTests::$skipped_tests"

      - name: Test Summary
        id: test_summary
        uses: test-summary/action@v2
        with:
          paths: "target/surefire-reports/junitreports/TEST-*.xml"
        if: always()

  notify-slack:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}  # Ensure this step runs after the previous job completes, regardless of its status
    steps:
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          BUILD_STATUS: ${{ job.status }}
          TOTAL_TESTS: ${{ steps.parse_xml_reports.outputs.totalTests }}
          PASSED_TESTS: ${{ steps.parse_xml_reports.outputs.passedTests }}
          FAILED_TESTS: ${{ steps.parse_xml_reports.outputs.failedTests }}
          SKIPPED_TESTS: ${{ steps.parse_xml_reports.outputs.skippedTests }}
        run: |
          slack_message="Results are attached.\n\nBUILD_STATUS: $BUILD_STATUS\nTotal: $TOTAL_TESTS\nPassed: $PASSED_TESTS\nFailed: $FAILED_TESTS\nSkipped: $SKIPPED_TESTS.\n[View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Maven tests completed successfully. $slack_message\"}" "$SLACK_WEBHOOK_URL"

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "Maven Test Results",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Maven Test Results*\nBUILD_STATUS: $BUILD_STATUS\nTotal Tests: $TOTAL_TESTS\nPassed Tests: $PASSED_TESTS\nFailed Tests: $FAILED_TESTS\nSkipped Tests: $SKIPPED_TESTS"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  send-email:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: List directory contents
        run: ls -R
        
      - name: Echo file path
        run: |
         echo "File exists: $(test -f README.md && echo 'yes' || echo 'no')"
        
      - name: Send mail
        uses: JaSiLez/smtp-notifier@main
        with:
    # Required mail server address:
           server_address: smtp.gmail.com
           # Required mail server port:
           server_port: 465
          # Optional (recommended): mail server username:
           username: ${{secrets.MAIL_ADDRESS}}
         # Optional (recommended) mail server password:
           password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
           subject: Github Actions job result
          # Required recipients' addresses:
           to: ${{secrets.MAIL_ADDRESS}}
          # Required sender full name (address can be skipped):
           from: ${{secrets.MAIL_ADDRESS}} # <user@example.com>
          # Optional whether this connection use TLS (default is true if server_port is 465)
           secure: true
          # Optional plain body:
           body: Build job of ${{github.repository}} completed successfully! BUILD_STATUS:${{job.status}}
         # Optional HTML body read from file:
           html_body: ${{ github.workspace }}/target/extent.html
        # Optional carbon copy recipients:
          # cc: kyloren@example.com,leia@example.com
           # Optional blind carbon copy recipients:
          # bcc: r2d2@example.com,hansolo@example.com
          # Optional recipient of the email response:
          # reply_to: luke@example.com
          # Optional Message ID this message is replying to:
          # in_reply_to: <random-luke@example.com>
          # Optional unsigned/invalid certificates allowance:
           ignore_cert: true
         # Optional converting Markdown to HTML (set content_type to text/html too):
           convert_markdown: true
            # Optional attachments:
           attachments: ${{ github.workspace }}/target/extent.html
         # Optional priority: 'high', 'normal' (default) or 'low'
           priority: low

