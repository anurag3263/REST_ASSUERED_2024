# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Slack notification and Maven Status 

on:
  workflow_dispatch:
    # Manually trigger the workflow

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven and capture test results
      id: build
      run: |
        # Run Maven build and capture output to a log file
        mvn -B test | tee maven-output.log
        
        # Extract test results from Maven output
        $testResults = Get-Content -Path maven-output.log -Raw
        
        # Extract counts using regex
        if ($testResults -match 'Tests run: (\d+), Failures: (\d+), Errors: (\d+), Skipped: (\d+)') {
          $totalTests = [int]$matches[1]
          $failedTests = [int]$matches[2]
          $errorTests = [int]$matches[3]
          $skippedTests = [int]$matches[4]
          $passedTests = $totalTests - $failedTests - $errorTests - $skippedTests
        } else {
          Write-Output "No test results found in Maven output."
          exit 1
        }

        Write-Output "Total tests: $totalTests, Passed tests: $passedTests, Failed tests: $failedTests, Error tests: $errorTests, Skipped tests: $skippedTests"

        # Set outputs for later steps to use
        Write-Output "::set-output name=totalTests::$totalTests"
        Write-Output "::set-output name=passedTests::$passedTests"
        Write-Output "::set-output name=failedTests::$failedTests"
        Write-Output "::set-output name=errorTests::$errorTests"
        Write-Output "::set-output name=skippedTests::$skippedTests"

    - name: Notify Slack with Test Results
      if: always()
      shell: pwsh
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
      run: |
        # Generate the URL to the artifacts location
        $artifactsUrl = "https://github.com/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
        
        # Retrieve outputs from previous step
        $totalTests = $env:totalTests
        $passedTests = $env:passedTests
        $failedTests = $env:failedTests
        $errorTests = $env:errorTests
        $skippedTests = $env:skippedTests
        
        # Prepare the Slack message payload
        $jsonBody = @{
          text = "API Tests have completed. Results are attached."
          attachments = @(
            @{
              fallback = "Test results are attached."
              color = if ($failedTests -gt 0 -or $errorTests -gt 0) { "#FF0000" } elseif ($skippedTests -gt 0) { "#FFA500" } else { "#36a64f" }
              title = "Test Results"
              text = "Total: $($totalTests), Passed: $($passedTests), Failed: $($failedTests), Errors: $($errorTests), Skipped: $($skippedTests). [View detailed report]($artifactsUrl)"
              fields = @(
                @{
                  title = "Build Status"
                  value = "${{ job.status }}"
                  short = $true
                }
              )
            }
          )
        }
        
        # Convert the hashtable to JSON
        $jsonBody = $jsonBody | ConvertTo-Json -Depth 20
        
        # Send JSON payload to Slack
        Invoke-RestMethod -Uri $env:SLACK_WEBHOOK -Method Post -Body $jsonBody -ContentType 'application/json'
